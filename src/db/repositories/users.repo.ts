import { pool } from "../../config/db.js";
import { UsersSQL } from "../queries/users.sql.js";

// Represents the shape of a user record in the "mirror" users table.
// This helps TypeScript catch mismatches between DB rows and app logic.
export type MirrorUserRow = {
    uuid: string;                          // unique user id (generated by DB)
    user_email: string;                    // main identifier for login/lookup
    user_name: string | null;              // optional display name
    is_email_verified: boolean;            // whether email is verified
    referral_code: string | null;          // unique code for referrals
    supabase_user_id: string | null;       // links to Supabase auth user
    role: "end_user" | "cafe_admin" | "cafe_sub_admin" | "master_admin";
    // role decides access level in the app
};

// Data-access layer (Repository Pattern) for "users" table.
// Keeps raw SQL out of the rest of the codebase → makes DB logic reusable & testable.
export const UsersRepo = {
    // Insert new user or update existing one (mirror of Supabase auth data).
    // Use case: whenever a user signs up or profile info changes.
    async upsertMirrorUser(args: {
        supabase_user_id: string;
        user_email: string;
        user_name?: string | null;
        phone?: string | null;
        is_email_verified?: boolean;
    }): Promise<MirrorUserRow | null> {
        const vals = [
            args.supabase_user_id,
            args.user_email,
            args.user_name ?? null,
            args.phone ?? null,
            args.is_email_verified ?? false,
        ];
        const { rows } = await pool.query<MirrorUserRow>(
            UsersSQL.upsertMirror,
            vals
        );
        return rows[0] ?? null; // return inserted/updated row
    },

    // Look up a user by Supabase auth ID.
    // Use case: mapping between Supabase session and local user profile.
    async findBySupabaseId(supabaseId: string): Promise<MirrorUserRow | null> {
        const { rows } = await pool.query<MirrorUserRow>(
            UsersSQL.findBySupabaseId,
            [supabaseId]
        );
        return rows[0] ?? null;
    },

    // Look up a user by email.
    // Use case: login flows, invitations, admin tools, etc.
    async findByEmail(email: string): Promise<MirrorUserRow | null> {
        const { rows } = await pool.query<MirrorUserRow>(
            UsersSQL.findByEmail,
            [email]
        );
        return rows[0] ?? null;
    },
};

// Export repo type → useful for dependency injection & mocking in tests
export type UsersRepoType = typeof UsersRepo;
